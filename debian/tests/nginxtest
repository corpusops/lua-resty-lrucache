#!/bin/bash
set -e

if [ ! -f /usr/lib/nginx/modules/ngx_http_lua_module.so ]; then
  # Skip the test if ngx_http_lua_module.so doesn't exist
  exit 77
fi

# Tests are skipped on ppc64el architecture,
# where the luajit2 library is broken.
case "`uname -m`" in
  ppcle|ppc64le)
  exit 77
  ;;
esac

cat <<EOF > "/etc/nginx/sites-enabled/default"
server {
  listen 80 default_server;

  location /t {
    content_by_lua_block {
      local lrucache = require "resty.lrucache"
      local c = lrucache.new(3)

      collectgarbage()

      -- set values
      c:set("int-value", 0)
      c:set("string-value", "abc")
      c:set("bool-value", true)
      ngx.say("int-value: ", (c:get("int-value")))
      ngx.say("string-value: ", (c:get("string-value")))
      ngx.say("string-value: ", (c:get("bool-value")))

      -- update values
      c:set("int-value", 1)
      c:set("string-value", "def")
      c:set("bool-value", false)
      ngx.say("int-value: ", (c:get("int-value")))
      ngx.say("string-value: ", (c:get("string-value")))
      ngx.say("string-value: ", (c:get("bool-value")))

      -- delete values
      c:delete("int-value")
      c:delete("string-value")
      c:delete("bool-value")
      ngx.say("int-value: ", (c:get("int-value")))
      ngx.say("string-value: ", (c:get("string-value")))
      ngx.say("string-value: ", (c:get("bool-value")))

      -- set values again
      c:set("int-value", 0)
      c:set("string-value", "abc")
      c:set("bool-value", true)
      ngx.say("int-value: ", (c:get("int-value")))
      ngx.say("string-value: ", (c:get("string-value")))
      ngx.say("string-value: ", (c:get("bool-value")))

      -- flush cache
      c:flush_all()
      ngx.say("int-value: ", (c:get("int-value")))
      ngx.say("string-value: ", (c:get("string-value")))
      ngx.say("string-value: ", (c:get("bool-value")))
    }
  }
}
EOF

# XXX - remove with new ngx_lua module
cat <<EOF > "/etc/nginx/conf.d/00-mod-http-lua.conf"
lua_package_path '/usr/share/lua/5.1/?.lua;;';
EOF

exp="int-value: 0
string-value: abc
string-value: true
int-value: 1
string-value: def
string-value: false
int-value: nil
string-value: nil
string-value: nil
int-value: 0
string-value: abc
string-value: true
int-value: nil
string-value: nil
string-value: nil
response_code: 200"

nginx -t || :
invoke-rc.d nginx restart
out=`curl --fail -w "response_code: %{http_code}\n" http://127.0.0.1/t`

if [ x"${out}" != x"${exp}" ]; then
  echo "output:"
  echo "====================="
  echo "${out}"
  echo "====================="
  echo "expected output:"
  echo "====================="
  echo "${exp}"
  echo "====================="
  exit 1
fi
